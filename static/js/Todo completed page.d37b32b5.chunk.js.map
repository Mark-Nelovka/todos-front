{"version":3,"file":"static/js/Todo completed page.d37b32b5.chunk.js","mappings":"2QAYe,SAASA,IACtB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GACzCC,GAAQC,EAAAA,EAAAA,IACXC,GAAUA,EAAMF,MAAMG,KAAKA,KAAKH,MAAMI,YAEnCC,GAAUJ,EAAAA,EAAAA,IACbC,GAAUA,EAAMF,MAAMG,KAAKA,KAAKG,WAAWD,QAAQD,YAEhDG,GAAeN,EAAAA,EAAAA,IAAgBC,GAAUA,EAAMF,MAAMQ,QACrDC,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,KAEa,IAAjBX,EAAMY,QACRH,GAASI,EAAAA,EAAAA,IAAkB,CAAEC,OAAQ,EAAGC,MAAO,GAAIC,KAAM,IAC3D,GACC,KAEHL,EAAAA,EAAAA,YAAU,KAEJJ,EAAaU,YACfC,IAAAA,OAAgBC,QAAQZ,EAAaa,QACvC,GACC,CAACb,IAEJ,MAAMc,EAAeC,IACnB,MAAM,QAAEC,GAAYD,EAAEE,OACG,SAArBD,EAAQE,UACV3B,GAAgBD,EAClB,EAQF,OACE6B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACPD,EAAAA,EAAAA,KAACE,EAAAA,EAAU,KACXL,EAAAA,EAAAA,MAAA,OAAKM,UAAU,YAAWJ,SAAA,CACvBrB,EAAaU,YAA+B,IAAjBjB,EAAMY,SAAgBiB,EAAAA,EAAAA,KAACI,EAAAA,QAAS,KAC5DJ,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,CACPC,WAZYC,IAClB,MAAMrB,EAAkB,GAAVqB,EACd3B,GAASI,EAAAA,EAAAA,IAAkB,CAAEC,OAAQd,EAAMY,OAAQG,QAAOC,KAAMoB,IAAW,EAWrE/B,QAASA,EACTgC,YAAY,kCACZrC,MAAO,IAAIA,SAGf6B,EAAAA,EAAAA,KAACS,EAAAA,EAAM,CACLC,GAAG,aACHC,KAAK,SACLC,UAAU,OACVC,KAAMrB,EACNsB,OAAO,qBAAoBf,UAE3BC,EAAAA,EAAAA,KAAA,OACE,gBAAc,OACde,IAAKC,EAAAA,EACLC,IAAI,uCAGPjD,IAAegC,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CAACC,WAAY3B,MAGzC,C","sources":["pages/CompletedPage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"redux/hook\";\nimport { getCompletedTodos } from \"redux/todos/todosOperations\";\nimport ErrorPage from \"./ErrorPage\";\nimport TodoList from \"components/TodoList/TodoList\";\nimport Header from \"components/Header/Header\";\nimport Navigation from \"components/Navigation/Navigation\";\nimport Modal from \"components/Modal/Modal\";\nimport Button from \"ui/Button/Button\";\nimport PlusIcon from \"assets/plus-icon.svg\";\nimport Notiflix from \"notiflix\";\n\nexport default function CompletedPage(): JSX.Element {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const todos = useAppSelector(\n    (state) => state.todos.data.data.todos.completed\n  );\n  const maxPage = useAppSelector(\n    (state) => state.todos.data.data.pagination.maxPage.completed\n  );\n  const requestError = useAppSelector((state) => state.todos.error);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    // If storage has already have todos and do or not request\n    if (todos.length === 0) {\n      dispatch(getCompletedTodos({ offset: 0, limit: 10, page: 1 }));\n    }\n  }, []);\n\n  useEffect(() => {\n    // Catch error for notify\n    if (requestError.statusCode) {\n      Notiflix.Notify.warning(requestError.message);\n    }\n  }, [requestError]);\n\n  const toggleModal = (e: React.MouseEvent): void => {\n    const { dataset } = e.target as HTMLDivElement;\n    if (dataset.backdrop === \"true\") {\n      setIsModalOpen(!isModalOpen);\n    }\n  };\n\n  const getNewTodo = (newPage: number) => {\n    const limit = newPage * 10;\n    dispatch(getCompletedTodos({ offset: todos.length, limit, page: newPage }));\n  };\n\n  return (\n    <>\n      <Header />\n      <Navigation />\n      <div className=\"container\">\n        {requestError.statusCode && todos.length === 0 && <ErrorPage />}\n        <TodoList\n          getNewTodo={getNewTodo}\n          maxPage={maxPage}\n          isEmptyText=\"You haven't completed any tasks\"\n          todos={[...todos]}\n        />\n      </div>\n      <Button\n        id=\"open-modal\"\n        type=\"button\"\n        dataValue=\"true\"\n        func={toggleModal}\n        styles=\"button-toggle-form\"\n      >\n        <img\n          data-backdrop=\"true\"\n          src={PlusIcon}\n          alt=\"Button for open create todo form\"\n        />\n      </Button>\n      {isModalOpen && <Modal toggleFunc={toggleModal} />}\n    </>\n  );\n}\n"],"names":["CompletedPage","isModalOpen","setIsModalOpen","useState","todos","useAppSelector","state","data","completed","maxPage","pagination","requestError","error","dispatch","useAppDispatch","useEffect","length","getCompletedTodos","offset","limit","page","statusCode","Notiflix","warning","message","toggleModal","e","dataset","target","backdrop","_jsxs","_Fragment","children","_jsx","Header","Navigation","className","ErrorPage","TodoList","getNewTodo","newPage","isEmptyText","Button","id","type","dataValue","func","styles","src","PlusIcon","alt","Modal","toggleFunc"],"sourceRoot":""}